import argparse
import json
import os
import os.path
import re
import subprocess
import sys

if sys.version_info[0] == 3:
    from urllib.request import urlopen
else:
    # Not Python 3 - today, it is most likely to be Python 2
    # But note that this might need an update when Python 4
    # might be around one day
    from urllib import urlopen

CI_ENV_FLAG_FILE = "/tools/ci.environment"
external_wix_repositories_relative_path = "/tools/external_wix_repositories.bzl"

repositories_url = os.environ.get(
    "REPOSITORIES_URL",
    "https://bo.wix.com/bazel-repositories-server/repositories"
)


def fetch_repositories():
    response = urlopen(repositories_url).read()
    repos = json.loads(response)["repositories"]
    return repos


def file_is_not_empty(some_file):
    return os.stat(some_file).st_size != 0


def read_current_repo_name(workspace_dir):
    workspace_file_path = workspace_dir + "/WORKSPACE"
    with open(workspace_file_path, "r") as workspace_file:
        for line in workspace_file:
            match = re.match("""workspace\s*\(\s*name\s*=\s*"([^"]+)"\s*\)\s*""", line)
            if match:
                return match.group(1)
    raise Exception("Could not locate workspace name in %s" % workspace_file_path)


def write_repositories(workspace_dir):
    current_repo_name = read_current_repo_name(workspace_dir)
    wix_external_repositories_file = workspace_dir + external_wix_repositories_relative_path
    if (os.path.isfile(wix_external_repositories_file) and file_is_not_empty(wix_external_repositories_file)) and (
            not os.path.isfile(workspace_dir + CI_ENV_FLAG_FILE)):
        sys.exit(0)

    print("Generating %s" % external_wix_repositories_relative_path)
    repositories = fetch_repositories()
    with open(wix_external_repositories_file, "w+") as external_repositories:
        external_repositories.write("# Automatically generated by tools/resolve_external_wix_repositories.py\n\n")
        external_repositories.write("""load("@bazel_tools//tools/build_defs/repo:git.bzl", "git_repository")\n\n""")
        external_repositories.write("def external_wix_repositories():\n   pass\n\n")

        for repo in repositories:
            repo_name = repo["name"]
            if repo_name == current_repo_name:
                continue
            repo_url = repo["url"]
            repo_commit = last_commit(repo_url)
            external_repositories.write("   git_repository(\n")
            external_repositories.write("""      name = "%s",\n""" % repo_name)
            external_repositories.write("""      remote = "%s",\n""" % repo_url)
            external_repositories.write("""      commit = "%s",\n""" % repo_commit)
            external_repositories.write("   )\n\n")

    open(workspace_dir + "/BUILD.bazel", 'a').close()
    open(workspace_dir + "/tools/BUILD.bazel", 'a').close()


def parse_workspace_dir():
    parser = argparse.ArgumentParser()
    parser.add_argument('workspace_dir')
    args = parser.parse_args()
    return args.workspace_dir


def last_commit(repo_url):
    commits_output = subprocess.check_output(['git', 'ls-remote', '--heads', repo_url, 'refs/heads/master'])
    return commits_output.decode("utf-8").splitlines()[0].split('\t')[0]


def main():
    write_repositories(parse_workspace_dir())


if __name__ == "__main__":
    main()
